(* debug = integer between 0 and 3
    0 = merely no log at all, except critical errors and printing the debug
        level itself
    1 = level 0 + positive filtering matches (i.e. when the filter detects
        something to block)
    2 = level 1 + negative filtering matches (i.e. when the filter detects
        that it must not block something)
    3 = level 2 + print all the fetched configuration variables in the filter
        configuration file (modules aliasing, filtered labels, filtered ids,
        ...)
*)
debug = 2

(* modules = [(a1, b1), (a2, b2) ...] is a list of couples of strings (a, b)
   with 'a' being an alias, and 'b' being a PATH to the aliased
   PKCS#11 module
*)
modules = [ ("", "/usr/lib/opensc-pkcs11.so"), ("ssm", "/usr/lib/softhsm/libsofthsm2.so")]

(* log_subchannel = string representing the filter log subchannel in the server *)
log_subchannel = filter

(* forbidden_mechanisms = [(a1, b1), (a2, b2) ...] is a list of couples where
   'a' is a regular expression string representing modules and 'b' is a list
   of PKCS#11 mechanisms with the PKCS#11 definition syntax (CKM_RSA_X_509 for
   instance)
*)
forbidden_mechanisms = [("ssm", [])]

(* allowed_labels = [(a1, b1), (a2, b2) ...] is a list of couples where 'a1',
   'a2', ... are regular expression strings representing module names, and
   'b1', 'b2', ... are regular expressions representing labels

   example: allowed_labels  = [("opencryptoki", ["not_filtered_.*", "test"])]
   Here, only objects with CKA_LABEL such as "not_filtered_.*" and "test" are
   usable for the "opencryptoki" alias.

   default: NO filtering, uncomment and configure below to filter objects
*)

allowed_labels = [("", ["rm_h.*"]), ("ssm", [".*"])]
wrapping_format_key = "00112233445566778899aabbccddeeff"

(* allowed_ids = [(a1, b1), (a2, b2) ...] is a list of couples where 'a1',
   'a2', ... are regular expression strings representing module names, and
   'b1', 'b2', ... are regular expressions representing ids

   example: allowed_ids  = [("softhsm", [".*"])]
   Here, this rule allows all CKA_ID to be used for the "softhsm" alias.

   default: NO filtering, uncomment and configure below to filter objects
*)
(*
allowed_ids  = [("softhsm", [".*"])]
*)

(* forbidden_functions = [(a1, b1), (a2, b2) ...] is a list of couples where
   'a1', 'a2', ... are regular expression strings representing module names,
   and 'b1', 'b2', ... are lists of PKCS#11 functions with the PKCS#11 naming
   convention (C_Login, C_Logout ...)

   default OFF, uncomment and configure below to enable;
*)
(*
forbidden_functions  = [("soft.*", []), ("softhsm", [])]
*)


forbiddden_functions = [("", [ 	C_InitToken,
      	                          	C_InitPIN,
				        C_SetPIN,
					C_CreateObject,
					C_CopyObject,
					C_GenerateKey,
					C_GenerateKeyPair,
	                                C_EncryptInit,
					C_Encrypt,
					C_EncryptUpdate,
					C_EncryptFinal,
					C_DigestKey,
					C_SetAttributeValue,
					C_SignRecoverInit,
					C_SignRecover,
					C_VerifyRecoverInit,
					C_VerifyRecover,
					C_DigestEncryptUpdate,
					C_DecryptDigestUpdate,
					C_SignEncryptUpdate,
					C_DecryptVerifyUpdate,
					C_WrapKey,   
					C_UnwrapKey,
					C_DeriveKey,
					C_SeedRandom,
			   ]), 
			   ("ssm", [ 	C_InitToken,
      	                          	C_InitPIN,
				        C_SetPIN,
					C_CopyObject,
					C_DigestKey,
					C_SignRecoverInit,
					C_SignRecover,
					C_VerifyRecoverInit,
					C_VerifyRecover,
					C_DigestEncryptUpdate,
					C_DecryptDigestUpdate,
					C_SignEncryptUpdate,
					C_DecryptVerifyUpdate,
					C_DeriveKey,
					C_SeedRandom,
			   ])
]

(* enforce_ro_sessions = [(a1, b1), (a2, b2) ...] is a list of couples where
   'a' is a regular expression string representing module names, and 'b1',
   'b2', ... are booleans that can take 'true', 'false', 'yes' and 'no' as
    possible values

   default OFF, uncomment and configure below to enable;
*)

enforce_ro_sessions  = [("", yes)]


(* forbid_admin_operations = [(a1, b1), (a2, b2) ...] is a list of couples
   where 'a' is a regular expression string representing module names, and
   'b1', 'b2', ... are booleans that can take 'true', 'false', 'yes' and 'no'
   as possible values

   default OFF, uncomment and configure below to enable;
*)

forbid_admin_operations = [(".*", yes)]


(* remove_padding_oracles = [(a1, b1), (a2, b2) ...] is a list of couples where
   'a' is a regular expression string representing module names, and 'b1',
   'b2', ... are a lists of cryptographic operations type that can take as
   possible values 'wrap', 'unwrap', 'encrypt', 'sign' and 'all' (this last
   one represents the sum of all the values)

   default OFF, uncomment and configure below to enable;
*)

remove_padding_oracles = [(".*", [wrap, unwrap, encrypt])]


(* filter_actions = list of couples of [string_regexp x list of couples of
   [PKCS#11_function x custom_function]]). This option is a way to extend
   the filter features as the user can provide its own hooks on every PKCS#11
   function. See FILTER.md for more information.

   default OFF, uncomment and configure below to enable;
*)
(* filter_actions = [
                  (".*", [(C_Login, c_Login_hook), (C_Initialize, c_Initialize_hook)]), 
                  ("soft.*", [(C_CloseSession, identity)])
                 ]
*)

(**** Fixing PKCS#11 with patchset 1 *
   See FILTER.md for a detailed explanation of patchset 1 and 2.

   default ON;
*)

filter_actions_pre = [ ("ssm",  [
                           (C_WrapKey, anssipki_filter_usage),
                           (C_WrapKey, anssipki_p12_export_init)
			   ])
		      ]

filter_actions_post = [ ("ssm",
                          [
                           (**** ANSSI PKI patches *)
                           (**** Get and change the PIN *)
                           (C_Login, anssipki_pin),
                           (C_SetPIN, anssipki_pin),
                           (C_InitPIN, anssipki_pin),

                           (**** Filtering the usage depending on the label *)
                           (C_SignInit, anssipki_filter_usage),
                           (C_EncryptInit, anssipki_filter_usage),
                           (C_DecryptInit, anssipki_filter_usage),
                           (C_SignRecoverInit, anssipki_filter_usage),
                           (C_DigestInit, anssipki_filter_usage),
                           (C_UnwrapKey, anssipki_filter_usage),
                           (C_CopyObject, anssipki_filter_usage),
                           (C_SetAttributeValue, anssipki_filter_usage),

                           (**** Using the X509 external validator          *)
                           (* (C_Sign, anssipki_filter_usage),
                           (C_SignUpdate, anssipki_filter_usage), *)

                           (**** P12 init for export and import             *)
                           (C_SignInit, anssipki_p12_export_init),
                           (C_EncryptInit, anssipki_p12_export_init),
                           (C_DecryptInit, anssipki_p12_export_init),
                           (C_SignRecoverInit, anssipki_p12_export_init),
                           (C_DigestInit, anssipki_p12_export_init),
                           (C_CloseSession, anssipki_p12_export_init),
                           (C_CloseAllSessions, anssipki_p12_export_init),
                           (C_CopyObject, anssipki_p12_export_init),
                           (C_UnwrapKey, anssipki_p12_export_init),

                           (******** This is optional: key usage segregation ******************************)
                           (* (C_Initialize, do_segregate_usage), *)

                           (******** Check for key creation and attribute manipulation on non local keys **)
                           (C_CreateObject, non_local_objects_patch),
                           (C_CopyObject, non_local_objects_patch),
                           (C_SetAttributeValue, non_local_objects_patch),

                           (******** Check for value extraction on sensitive/nonextractable keys **********)
                           (C_GetAttributeValue, prevent_sensitive_leak_patch),
                           (C_SetAttributeValue, prevent_sensitive_leak_patch),


                           (******** CryptokiX conflicting attributes patch addendum for existing objects *)
                           (C_EncryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DecryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DeriveKey, conflicting_attributes_patch_on_existing_objects),
                           (C_DigestKey, conflicting_attributes_patch_on_existing_objects),
                           (C_WrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_UnwrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_FindObjects, conflicting_attributes_patch_on_existing_objects),

                           (******** Patch addendum to handle key escrow (or not) *)
                           (C_EncryptInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_DecryptInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_SignInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_SignRecoverInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_VerifyInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_VerifyRecoverInit, dangerous_sensitive_keys_escrow_encrypt),
                           (C_DeriveKey, dangerous_sensitive_keys_escrow_encrypt),
                           (C_DigestKey, dangerous_sensitive_keys_escrow_encrypt),
                           (C_WrapKey, dangerous_sensitive_keys_escrow_encrypt),
                           (C_UnwrapKey, dangerous_sensitive_keys_escrow_encrypt),
                           (C_FindObjects, dangerous_sensitive_keys_escrow_encrypt),

                           (******** CryptokiX conflicting attributes patch *******************************)
                           (C_CreateObject, conflicting_attributes_patch), (C_CopyObject, conflicting_attributes_patch),
                           (C_UnwrapKey, conflicting_attributes_patch), (C_GenerateKey, conflicting_attributes_patch),
                           (C_GenerateKeyPair, conflicting_attributes_patch), (C_DeriveKey, conflicting_attributes_patch),
                           (C_SetAttributeValue, conflicting_attributes_patch),

                           (******** CryptokiX sticky attributes patch ************************************)
                           (C_CopyObject, sticky_attributes_patch),
                           (C_SetAttributeValue, sticky_attributes_patch),

                           (******** CryptokiX Wrapping format patch **************************************)
                           (C_WrapKey, wrapping_format_patch),
                           (C_UnwrapKey, wrapping_format_patch),

                           (******** Sanitizing the creation attributes patch *****************************)
                           (C_CreateObject, sanitize_creation_templates_patch), (C_CopyObject, sanitize_creation_templates_patch),
                           (C_GenerateKey, sanitize_creation_templates_patch), (C_GenerateKeyPair, sanitize_creation_templates_patch),
                           (C_DeriveKey, sanitize_creation_templates_patch), (C_UnwrapKey, sanitize_creation_templates_patch)
                          ]
                   )
(* If you want to use external pinpad readers, comment the three following
lines to disable the secure pin window which conflicts with pinpad readers *)
		,
		("", [(C_Login, anssipki_pin)])
                 ]

